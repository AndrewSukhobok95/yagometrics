// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AndrewSukhobok95/yagometrics.git/internal/database (interfaces: CustomDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomDB is a mock of CustomDB interface.
type MockCustomDB struct {
	ctrl     *gomock.Controller
	recorder *MockCustomDBMockRecorder
}

// MockCustomDBMockRecorder is the mock recorder for MockCustomDB.
type MockCustomDBMockRecorder struct {
	mock *MockCustomDB
}

// NewMockCustomDB creates a new mock instance.
func NewMockCustomDB(ctrl *gomock.Controller) *MockCustomDB {
	mock := &MockCustomDB{ctrl: ctrl}
	mock.recorder = &MockCustomDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomDB) EXPECT() *MockCustomDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCustomDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCustomDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCustomDB)(nil).Close))
}

// PingContext mocks base method.
func (m *MockCustomDB) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockCustomDBMockRecorder) PingContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockCustomDB)(nil).PingContext), arg0)
}
